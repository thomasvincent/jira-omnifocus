(() => {
  const action = new PlugIn.Action(function (selection, sender) {
    // START EDIT
    const configs = [
      {
        user: "", // use email address for jira cloud
        password: "", // you can use api tokens, see https://id.atlassian.com/manage-profile/security/api-tokens
        jiraUrl: "",
        omnifocusTagToUse: "Jira", // you can also use the format "Parent1 : Parent2 : Child"
        jiraQuery: "assignee=currentuser() and resolution is empty",
        processComments: false, // if true, a subtask is added for each ticket comment
        omnifocusCommentTagToUse: "Jira-Comment",
      },
    ];
    // END EDIT

    configs.forEach((config) => {
      const { user, password, jiraUrl, omnifocusTagToUse, jiraQuery, processComments, omnifocusCommentTagToUse } = config;

      const urlParams = "/rest/api/2/search?jql=" + encodeURIComponent(jiraQuery);
      const url = jiraUrl + urlParams;

      const credentials = btoa(`${user}:${password}`);

      const request = new PlugIn.Request(url);
      request.method = "GET";
      request.headers = { Authorization: `Basic ${credentials}` };

      // Find the tag
      const findOrCreateTag = (tagName) => {
        let tag = tagNamed(tagName);
        if (!tag) {
          tag = new Tag(tagName);
          tag.active = true;
        }
        return tag;
      };

      const processTag = (tagPath) => {
        const parsedTags = tagPath.split(" : ");
        let currentTag = null;

        for (const tagName of parsedTags) {
          currentTag = currentTag
            ? currentTag.childNamed(tagName)
            : findOrCreateTag(tagName);
          if (!currentTag) break;
        }

        return currentTag;
      };

      const tag = processTag(omnifocusTagToUse);
      if (!tag) {
        console.error(new Error("Could not create tag"));
        return;
      }

      const tasks = tag.taggedTasks;

      const omnifocusComments = {};
      if (processComments) {
        const commentTag = findOrCreateTag(omnifocusCommentTagToUse);
        const commentTasks = commentTag.taggedTasks;
        commentTasks.forEach((comment) => {
          const commentId = comment.name.match(/^[A-Za-z0-9-]+ [0-9]+/);
          if (commentId) omnifocusComments[commentId[0]] = comment;
        });
      }

      const omnifocusTasks = {};
      tasks.forEach((task) => {
        const taskId = task.name.match(/^[A-Za-z0-9-]+/);
        if (taskId) {
          omnifocusTasks[taskId[0]] = task;
          task.jiraToOmnifocusMatched = false;
        }
      });

      request.onSuccess = (response) => {
        let createdTasks = 0;
        let checkedTickets = 0;
        let createdComments = 0;

        if (response.mimeType === "application/json") {
          const jsonResponse = JSON.parse(response.responseText);

          for (const issue of jsonResponse.issues) {
            checkedTickets++;
            const taskId = issue.key;
            const existingTask = omnifocusTasks[taskId];

            if (existingTask) {
              existingTask.completed = false;
              existingTask.jiraToOmnifocusMatched = true;
            } else {
              const taskName = `${taskId} ${issue.fields.summary}`;
              const newTask = new Task(taskName);
              newTask.id = taskId;
              const taskUrl = `${jiraUrl}/browse/${taskId}`;
              createdTasks++;

              newTask.addTag(tag);
              newTask.note = `${taskUrl}\n${issue.fields.description || "No description"}`;
            }
          }

          for (const [taskId, task] of Object.entries(omnifocusTasks)) {
            if (!task.jiraToOmnifocusMatched) {
              const canDelete = !task.children.some((subtask) => !subtask.completed);
              if (canDelete) task.completed = true;
            }

            if (processComments) {
              const commentUrlParams = `/rest/api/2/issue/${taskId}/comment`;
              const commentUrl = jiraUrl + commentUrlParams;
              const commentRequest = new PlugIn.Request(commentUrl);
              commentRequest.method = "GET";
              commentRequest.headers = { Authorization: `Basic ${credentials}` };

              commentRequest.onSuccess = (commentResponse) => {
                const jsonComments = JSON.parse(commentResponse.responseText);
                for (const comment of jsonComments.comments) {
                  const commentId = `${taskId} ${comment.id}`;
                  if (!omnifocusComments[commentId]) {
                    const taskName = `${commentId} Comment:\n${comment.body}`;
                    const newTask = new Task(taskName);
                    newTask.id = commentId;
                    newTask.parent = task;
                    newTask.addTag(commentTag);
                    createdComments++;
                  }
                }
              };

              commentRequest.onFailure = (response) => {
                console.error(`Error fetching comments for task ${taskId}: ${response.statusText}`);
              };

              commentRequest.send();
            }
          }
        }

        console.log(`NOTICE: Synced ${jiraUrl}. Checked ${checkedTickets} Tickets, Created ${createdTasks} new tasks, Added ${createdComments} Subtickets for Comments`);
      };

      request.onFailure = (response) => {
        console.error(`Error fetching Jira tickets: ${response.statusText}`);
      };

      request.send();
    });
  });

  action.validate = function (selection, sender) {
    return true;
  };

  return action;
})();
